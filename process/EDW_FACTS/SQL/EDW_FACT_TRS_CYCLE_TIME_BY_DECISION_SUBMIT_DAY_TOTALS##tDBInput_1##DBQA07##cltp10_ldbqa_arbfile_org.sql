          SELECT      ---- DATES              CAST(TO_CHAR(DEC_HEARD_DATE, 'YYYYMMDD') AS NUMBER(16))                                                 AS DECISION_SUBMIT_DATE_KEY,     CAST(TO_CHAR(DEC_HEARD_DATE, 'YYYY') AS NUMBER(16))              AS DECISION_SUBMIT_YEAR,     CAST(TO_CHAR(DEC_HEARD_DATE, 'MONTH') AS VARCHAR2(10))                            AS DECISION_SUBMIT_MONTH,     CAST(TO_CHAR(DEC_HEARD_DATE, 'MM') AS NUMBER(16))              AS DECISION_SUBMIT_MONTH_NUMBER,     CAST(TO_CHAR(DEC_HEARD_DATE, 'DD') AS NUMBER(16))              AS DECISION_SUBMIT_DAY,               CAST(HAS_DD AS CHAR(1))                                                                                 AS HAS_DAMAGE_DISPUTE,   ---- FEATURE COUNTS                                              CAST(COUNT(DISTINCT DTL.FEATURE_ID) AS NUMBER(16))              AS TOTAL_FEATURES_HEARD,     CAST(SUM(EXT_FLAG) AS NUMBER(16))                  AS FEATURES_W_EXT,     CAST(SUM(WO_EXT_FLAG) AS NUMBER(16))                 AS FEATURES_WO_EXT,   ---- CYCLE TIME     CAST(ROUND(SUM(DEC_HEARD_DATE - FEATURE_SUBMIT_DATE) / COUNT(DISTINCT DTL.FEATURE_ID),1) as NUMBER(10,1))      AS AVG_CYCLE_TIME_ALL_FEATURES,     CAST(ROUND(SUM(CASE WHEN EXT_FLAG > 0 THEN (DEC_HEARD_DATE - FEATURE_SUBMIT_DATE)END) / SUM(EXT_FLAG), 1) as NUMBER(10,1))      AS AVG_CYCLE_TIME_FT_W_EXTS,     CAST(ROUND(SUM(CASE WHEN EXT_FLAG = 0 THEN (DEC_HEARD_DATE - FEATURE_SUBMIT_DATE)END) / SUM(WO_EXT_FLAG), 1) as NUMBER(10,1))   AS AVG_CYCLE_TIME_FT_WO_EXTS,   ---- TOTAL DAYS     CAST(ROUND(SUM(CASE WHEN EXT_FLAG > 0 THEN (DEC_HEARD_DATE - FEATURE_SUBMIT_DATE)END), 1) as NUMBER(10,1))                      AS TOT_DAYS_FEATURES_W_EXTS,     CAST(ROUND(SUM(CASE WHEN EXT_FLAG = 0 THEN (DEC_HEARD_DATE - FEATURE_SUBMIT_DATE)END), 1) as NUMBER(10,1))                      AS TOT_DAYS_FEATURES_WO_EXTS,     CAST(ROUND(SUM(DEC_HEARD_DATE - FEATURE_SUBMIT_DATE),1) as NUMBER(10,1))                                                        AS TOT_DAYS_ALL_FEATURES,              COVERAGE_GROUP_CODE                                                                                                             AS COVERAGE_GROUP_TYPE,              COVERAGE_GROUP_NAME                                                                                                             AS COVERAGE_GROUP_NAME,              COVERAGE_TYPE                                                                                                                   AS COVERAGE_TYPE,              COVERAGE_NAME                                                                                                                   AS COVERAGE_NAME,              POLICY_TYPE                                                                                                                     AS POLICY_TYPE,              POLICY_DESC                                                                                                                     AS POLICY_DESC,              PROGRAM                                                                                                                         AS PROGRAM,              PROGRAM_DESC                                                                                                                    AS PROGRAM_DESC    FROM    (     SELECT DISTINCT      FEAT.FEATURE_ID,      FEAT.SUBMIT_DATE AS FEATURE_SUBMIT_DATE,      DECS.INITIAL_SUBMIT_DATE AS DEC_HEARD_DATE,     ----CONDITION TO TEST FOR THE EXISTANCE OF AT LEAST ONE EXTENSION WHEN THERE IS A FILING PARTY MATCH      MAX(CASE WHEN (FIL_PTY2.FILING_PARTY_ID  =  EXT.FILING_PARTY_ID AND FIL.FILING_ID = FIL_EXT.FILING_ID)       OR (FIL_PTY.FILING_PARTY_ID   =  EXT.FILING_PARTY_ID AND FIL.FILING_ID = FIL_EXT.FILING_ID) THEN 1 ELSE 0 END)        AS EXT_FLAG,      CASE WHEN (MAX(CASE WHEN (FIL_PTY2.FILING_PARTY_ID  =  EXT.FILING_PARTY_ID AND FIL.FILING_ID = FIL_EXT.FILING_ID)       OR (FIL_PTY.FILING_PARTY_ID   =  EXT.FILING_PARTY_ID AND FIL.FILING_ID = FIL_EXT.FILING_ID) THEN 1 ELSE 0 END)) = 0 THEN 1 ELSE 0 END AS WO_EXT_FLAG,                  DDF.HAS_DD                                                                                                                                  AS HAS_DD,              ----COVERAGE TYPES - Added 12/29/20 ---                  COV_GRP.COVERAGE_GROUP_CODE,                  COV_GRP.COVERAGE_GROUP_NAME,                  COV_GRP.POLICY_TYPE,                  POL_TYP.POLICY_DESC                 AS POLICY_DESC,                  COV_DEF.COVERAGE_TYPE,                  COV_TYP.COVERAGE_NAME,                  PROG.PROGRAM        AS PROGRAM,                  PROG.DESCRIPTION    AS PROGRAM_DESC     FROM TRS.TRS_FILING                    FIL     --/* REQUIERS A STRAIGHT JOIN TO TRS.TRS_DECISION MAKE SURE THE FILING HAS A PUBLISHED DECISION */      JOIN  TRS.TRS_CASE                     CAS            ON (FIL.CASE_ID                   =   CAS.CASE_ID)     --/* RECOVERING PARTY */      JOIN  TRS.TRS_CASE_PARTY_ASSC          PTY_ASC        ON (CAS.CASE_ID                   =   PTY_ASC.CASE_ID)      JOIN  TRS.TRS_FILING_PARTY             FIL_PTY        ON (PTY_ASC.CASE_PARTY_ASSC_ID    =   FIL_PTY.CASE_PARTY_ASSC_ID AND  FIL.FILING_ID = FIL_PTY.FILING_ID)      JOIN  TRS.TRS_PARTY                    PTY            ON (PTY_ASC.PARTY_ID              =   PTY.PARTY_ID)      JOIN  TRS.TRS_OCCURRENCE               OCC            ON (PTY.OCCURRENCE_ID             =   OCC.OCCURRENCE_ID)      --JOIN  CCA.R_STATE                      ST             ON (OCC.LOSS_STATE                =   ST.STATE_CD)      JOIN  CPS.CPS_COMPANY                  CCOMP          ON (PTY.COMPANY_ID                =   CCOMP.COMPANY_ID)      JOIN  CCA.COMPANY                      COMP           ON (CCOMP.COCODE                  =   COMP.COCODE)     --/* ADVERSE PARTY */      JOIN  TRS.TRS_CASE_PARTY_ASSC          PTY_ASC2       ON (CAS.CASE_ID                   =   PTY_ASC2.CASE_ID)      JOIN  TRS.TRS_PARTY                    PTY2           ON (PTY_ASC2.PARTY_ID             =   PTY2.PARTY_ID )      JOIN  TRS.TRS_FILING_PARTY             FIL_PTY2       ON (PTY_ASC2.CASE_PARTY_ASSC_ID   =   FIL_PTY2.CASE_PARTY_ASSC_ID AND  FIL.FILING_ID =      FIL_PTY2.FILING_ID)      JOIN  CPS.CPS_COMPANY                  CCOMP2         ON (PTY2.COMPANY_ID               =   CCOMP2.COMPANY_ID)      JOIN  CCA.COMPANY                      COMP2          ON (CCOMP2.COCODE                 =   COMP2.COCODE)     --/* COVERAGE - FEATURE */      JOIN  TRS.TRS_COVERAGE                 COV            ON (PTY_ASC.CASE_PARTY_ASSC_ID    =   COV.CASE_PARTY_ASSC_ID)      JOIN  TRS.TRS_FEATURE                  FEAT           ON (COV.COVERAGE_ID               =   FEAT.COVERAGE_ID)      JOIN  TRS.TRS_DECISION                 DECS           ON (FIL.FILING_ID                 =   DECS.FILING_ID )      JOIN  TRS.TRS_ARBITR_DEC_PART          ADC_P          ON (DECS.DECISION_ID              =   ADC_P.DECISION_ID)      JOIN  TRS.TRS_FEATURE_DECISION         FT_DEC         ON (ADC_P.ARBITR_DEC_PART_ID      =   FT_DEC.ARBITR_DEC_PART_ID    AND  FEAT.FEATURE_ID              =   FT_DEC.FEATURE_ID)      JOIN  TRS.TRS_FEATURE_AWARD            FT_AWRD        ON (FT_DEC.FEATURE_DECISION_ID    =   FT_AWRD.FEATURE_DECISION_ID  AND  PTY_ASC2.CASE_PARTY_ASSC_ID  =   FT_AWRD.CASE_PARTY_ASSC_ID )              --/* COVERAGE TYPES */--                  JOIN TRS.TRS_COVERAGE_DEF               COV_DEF       ON (COV_DEF.COVERAGE_DEF_ID = COV.COVERAGE_DEF_ID)                  JOIN TRS.TRS_COVERAGE_GROUP_TYPE        COV_GRP       ON (COV_GRP.COVERAGE_GROUP_CODE = COV_DEF.COVERAGE_GROUP_TYPE)                  JOIN TRS.TRS_POLICY_TYPE                POL_TYP       ON (POL_TYP.POLICY_CODE = COV_GRP.POLICY_TYPE)                  JOIN TRS.TRS_COVERAGE_TYPE              COV_TYP       ON (COV_TYP.COVERAGE_CODE = COV_DEF.COVERAGE_TYPE)                  JOIN CCA.R_PROGRAM_CODES                PROG          ON (PROG.PROGRAM = COV_TYP.PROGRAM)       --/* FILINGS WITH EXTENSIONS */      LEFT OUTER JOIN      (SELECT DISTINCT F.FILING_ID          FROM TRS.TRS_FILING F, TRS.TRS_FILING_PARTY P, TRS.TRS_FILING_EXT FE         WHERE F.FILING_ID = P.FILING_ID AND FE.FILING_PARTY_ID = P.FILING_PARTY_ID) FIL_EXT ON FIL.FILING_ID = FIL_EXT.FILING_ID     --/* EXTENSION TABLE JOINS */      LEFT JOIN TRS.TRS_FILING_EXT            EXT    ON   (FIL_PTY2.FILING_PARTY_ID    =   EXT.FILING_PARTY_ID)     --/* ADD A LEFT JOIN TO THE DAMAGE DISPUTE TABLE TO BE USED AS A PARAMETER IN THE REPORT  BI-2828 */      JOIN ( SELECT DISTINCT          FR.FEATURE_ID,         CASE WHEN FR.FEATURE_RESPONSE_ID = DD.FEATURE_RESPONSE_ID THEN 'Y' ELSE 'N' END AS HAS_DD        FROM TRS.TRS_FEATURE_RESPONSE FR                   LEFT JOIN TRS.TRS_DAMAGE_DISPUTE DD ON FR.FEATURE_RESPONSE_ID = DD.FEATURE_RESPONSE_ID) DDF ON FEAT.FEATURE_ID = DDF.FEATURE_ID     --/* ADDITIONAL FILTERS */     WHERE   PTY.PARTY_ID                    <> PTY2.PARTY_ID          --Only get up to the previous day's data so we don't report a partial day's number      AND     DECS.INITIAL_SUBMIT_DATE        BETWEEN TRUNC(SYSDATE - 180) AND TRUNC(SYSDATE)            AND     DECS.STATUS_TYPE                =  'DECPUB'       AND     FIL.STATUS_TYPE                 <> 'VOID'      AND     NVL(OCC.STATUS_TYPE, 'NA')      <> 'DISCONTINUED'      AND     NVL(PTY_ASC.DELETED,'N')        <> 'Y'      AND     NVL(PTY_ASC2.DELETED,'N')       <> 'Y'     --/* THE CASE WAS NOT DEFERRED */       AND     CAS.CASE_ID NOT IN (SELECT DISTINCT F.CASE_ID FROM TRS.TRS_DEFERMENT F)     --/* DID NOT HAVE AN INTERNAL FILING EXTENSION */       AND     CAS.CASE_ID NOT IN (SELECT DISTINCT CASX.CASE_ID               FROM TRS.TRS_FILING_EXT EXT               JOIN TRS.TRS_FILING_PARTY FPX ON FPX.FILING_PARTY_ID = EXT.FILING_PARTY_ID              JOIN TRS.TRS_CASE_PARTY_ASSC PAX ON FPX.CASE_PARTY_ASSC_ID = PAX.CASE_PARTY_ASSC_ID              JOIN TRS.TRS_CASE CASX ON PAX.CASE_ID = CASX.CASE_ID             WHERE EXT.EXT_REASON_CODE IN ('AF_SUPPORT', 'NATURAL_DISASTER', 'POWER_OUTAGE'))              --* EXCLUDE ANYTHING THAT WAS ON HOLD FOR ANY REASON */              AND NOT EXISTS (SELECT 1 FROM TRS.TRS_HOLD HLD                                   WHERE (HLD.HOLD_REF_ID = OCC.OCCURRENCE_ID AND HOLD_TYPE = 'OCCURRENCE')                                      OR (HLD.HOLD_REF_ID = FIL.FILING_ID AND HOLD_TYPE = 'FILING')                                      OR (HLD.HOLD_REF_ID = ADC_P.ARBITR_DEC_PART_ID AND HOLD_TYPE = 'DECISION_PART')                                      )                  --/* EXCLUDES CASES THAT CONTAINED A NON COMPULSORY CONSENT */      AND     CAS.CASE_ID NOT IN (SELECT               PA.CASE_ID             FROM TRS.TRS_CONSENT_REQUEST CSTR               JOIN TRS.TRS_CASE_PARTY_ASSC PA ON CSTR.REQ_CASE_PARTY_ID = PA.CASE_PARTY_ASSC_ID )     --/* EXCLUDES CASES THAT HAD AN AF SUPPORT CASE - REGARDLESS OF THE CASE STATUS OF THE SUPPORT CASE */      AND     CAS.CASE_ID NOT IN (SELECT DISTINCT               CSUP.CASE_ID              FROM TRS.TRS_CASE_SUPP_REQ CSUP)      --/* EXCLUDES CASES THAT HAD AN ARBITRATOR SUPPORT CASE - REGARDLESS OF THE CASE STATUS OF THE ARB CASE */      AND     CAS.CASE_ID NOT IN (SELECT DISTINCT               ASUP.CASE_ID              FROM TRS.TRS_ARBITR_SUPP_REQ ASUP)      --/* EXCLUDE CASES THAT HAD A PDI REQUEST FROM ANY OF THE PARTIES INVOLVED */                                                         AND     CAS.CASE_ID NOT IN (SELECT DISTINCT               PDI.CASE_ID              FROM TRS.TRS_PDI_REQ PDI)      --/* EXCLUDE CASES THAT HAD A COLLABORATIVE HEARING REQUESTS FROM ANY OF THE PARTIES INVOLVED */      AND     NVL(FIL_PTY.PO3, 'N') = 'N'       AND  NVL(FIL_PTY2.PO3, 'N') = 'N'      --/* EXCLUDE CASES THAT HAD JE REQUESTS */      AND   CAS.AF_CASE_ID NOT IN (SELECT DISTINCT               EFT.AF_CASE_ID               FROM AF_RPTS.AFR_EXCLUSION_FACT EFT)     GROUP BY OCC.OCCURRENCE_ID,            CAS.AF_CASE_ID,            CAS.CASE_ID,            FIL.AF_FILING_ID,            FEAT.FEATURE_ID,            FEAT.AF_FEATURE_ID,            FEAT.SUBMIT_DATE,            DECS.INITIAL_SUBMIT_DATE,            DDF.HAS_DD,            FIL_PTY.FILING_PARTY_ID,                  COV_GRP.COVERAGE_GROUP_CODE,                  COV_GRP.COVERAGE_GROUP_NAME,                  COV_GRP.POLICY_TYPE,                  POL_TYP.POLICY_DESC,                  COV_DEF.COVERAGE_TYPE,                  COV_TYP.COVERAGE_NAME,                  PROG.PROGRAM,                  PROG.DESCRIPTION    ) DTL    GROUP BY       TO_CHAR(DEC_HEARD_DATE, 'YYYYMMDD'),     TO_CHAR(DEC_HEARD_DATE, 'YYYY'),           TO_CHAR(DEC_HEARD_DATE, 'MONTH'),           TO_CHAR(DEC_HEARD_DATE, 'MM'),           TO_CHAR(DEC_HEARD_DATE, 'DD'),              COVERAGE_GROUP_CODE,              COVERAGE_GROUP_NAME,              POLICY_TYPE,              POLICY_DESC,              COVERAGE_TYPE,              COVERAGE_NAME,              PROGRAM,              PROGRAM_DESC,                       HAS_DD  
